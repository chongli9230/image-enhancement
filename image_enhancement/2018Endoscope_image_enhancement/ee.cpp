#include<iostream>
#include <string>
#include<cmath>
#include<math.h>
#include<opencv2/opencv.hpp>
#include <opencv2/core.hpp>

using namespace std;
using namespace cv;

/// <summary>
/// </summary>
/// <param name="img">data</param>
/// <param name="sharp">between 0 - 15</param>
/// <returns></returns>
Mat sharpening(Mat img, int sharp)
{
    if (sharp == 0)
    {
        return img;
    }
    Mat sharpen_img;
    Mat blurImg;
    Mat out;
    double w = sharp * 0.5;
    /*
    GaussianBlur(img, blurImg, Size(5, 5), 10);
    addWeighted(img, 1 + w, blurImg, -w, 0, out);
    */
    
    int kernel_size = 5;
    Mat kernel_G;
    kernel_G = getGaussianKernel(kernel_size,kernel_size);
    kernel_G = kernel_G * kernel_G.t();
    kernel_G = - kernel_G * w;
    
    kernel_G.at<double>(kernel_size/2, kernel_size/2) += 1+w;
    
    cout<<kernel_G<<endl;
    //kernel_G.convertTo(kernel_G, CV_32FC1);
    filter2D(img, out, -1, kernel_G);
    double sigma = sharp * 0.05;
    if (sharp > 0 && sharp <= 5)
    {
        GaussianBlur(out, out, Size(3, 3), 0.3);
    }
    else
    {
        GaussianBlur(out, out, Size(3, 3), sigma);
    }

    return out;
}

Mat sharpening_stream(Mat src, int sharp)
{
    if (sharp == 0)
    {
        return src;
    }
    Mat dst;
    float w = sharp / 2;
    float sigma = sharp * 0.05;

    Mat kernel_G = (Mat_<float>(7, 7) <<
        0.01662966, 0.01837862, 0.01951509, 0.01990932, 0.01951509, 0.01837862, 0.01662966,
        0.01837862, 0.02031151, 0.0215675, 0.0220032, 0.0215675, 0.02031151, 0.01837862,
        0.01951509, 0.0215675, 0.02290116, 0.0233638, 0.02290116, 0.0215675, 0.01951509,
        0.01990932, 0.0220032, 0.0233638, 0.02383578, 0.0233638, 0.0220032, 0.01990932,
        0.01951509, 0.0215675, 0.02290116, 0.0233638, 0.02290116, 0.0215675, 0.01951509,
        0.01837862, 0.02031151, 0.0215675, 0.0220032, 0.0215675, 0.02031151, 0.01837862,
        0.01662966, 0.01837862, 0.01951509, 0.01990932, 0.01951509, 0.01837862, 0.01662966);
    kernel_G = -w * kernel_G;
    kernel_G.at<float>(3, 3) += (1 + w);
    filter2D(src, dst, src.depth(), kernel_G);
    if (sharp > 0 && sharp <= 5) {
        GaussianBlur(dst, dst, Size(3, 3), 0.3);
    }
    else {
        GaussianBlur(dst, dst, Size(3, 3), sigma);
    }

    return dst;
}

Mat sharpening_stream_save_kernel(Mat src, int sharp)
{
    Mat dst;

    float sigma = sharp * 0.05;

    if (sharp <= 5)
    {
        sigma = 0.3;
    }


    Mat kernel_G[21];

    kernel_G[0] = (Mat_<short>(5, 5) << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    kernel_G[1] = (Mat_<short>(5, 5) << -18, -20, -20, -20, -18, -20, -21, -21, -21, -20, -20, -21, 1513, -21, -20, -20, -21, -21, -21, -20, -18, -20, -20, -20, -18);
    kernel_G[2] = (Mat_<short>(5, 5) << -37, -40, -40, -40, -37, -40, -42, -43, -42, -40, -40, -43, 2003, -43, -40, -40, -42, -43, -42, -40, -37, -40, -40, -40, -37);
    kernel_G[3] = (Mat_<short>(5, 5) << -56, -60, -61, -60, -56, -60, -63, -65, -63, -60, -61, -65, 2493, -65, -61, -60, -63, -65, -63, -60, -56, -60, -61, -60, -56);
    kernel_G[4] = (Mat_<short>(5, 5) << -75, -80, -81, -80, -75, -80, -85, -86, -85, -80, -81, -86, 2983, -86, -81, -80, -85, -86, -85, -80, -75, -80, -81, -80, -75);
    kernel_G[5] = (Mat_<short>(5, 5) << -94, -100, -102, -100, -94, -100, -106, -108, -106, -100, -102, -108, 3473, -108, -102, -100, -106, -108, -106, -100, -94, -100, -102, -100, -94);
    kernel_G[6] = (Mat_<short>(5, 5) << -113, -120, -122, -120, -113, -120, -127, -130, -127, -120, -122, -130, 3963, -130, -122, -120, -127, -130, -127, -120, -113, -120, -122, -120, -113);
    kernel_G[7] = (Mat_<short>(5, 5) << -132, -140, -143, -140, -132, -140, -149, -152, -149, -140, -143, -152, 4452, -152, -143, -140, -149, -152, -149, -140, -132, -140, -143, -140, -132);
    kernel_G[8] = (Mat_<short>(5, 5) << -151, -160, -163, -160, -151, -160, -170, -173, -170, -160, -163, -173, 4942, -173, -163, -160, -170, -173, -170, -160, -151, -160, -163, -160, -151);
    kernel_G[9] = (Mat_<short>(5, 5) << -169, -180, -184, -180, -169, -180, -191, -195, -191, -180, -184, -195, 5432, -195, -184, -180, -191, -195, -191, -180, -169, -180, -184, -180, -169);
    kernel_G[10] = (Mat_<short>(5, 5) << -188, -200, -204, -200, -188, -200, -212, -217, -212, -200, -204, -217, 5922, -217, -204, -200, -212, -217, -212, -200, -188, -200, -204, -200, -188);
    kernel_G[11] = (Mat_<short>(5, 5) << -207, -220, -225, -220, -207, -220, -234, -238, -234, -220, -225, -238, 6412, -238, -225, -220, -234, -238, -234, -220, -207, -220, -225, -220, -207);
    kernel_G[12] = (Mat_<short>(5, 5) << -226, -240, -245, -240, -226, -240, -255, -260, -255, -240, -245, -260, 6902, -260, -245, -240, -255, -260, -255, -240, -226, -240, -245, -240, -226);
    kernel_G[13] = (Mat_<short>(5, 5) << -245, -260, -265, -260, -245, -260, -276, -282, -276, -260, -265, -282, 7391, -282, -265, -260, -276, -282, -276, -260, -245, -260, -265, -260, -245);
    kernel_G[14] = (Mat_<short>(5, 5) << -264, -280, -286, -280, -264, -280, -298, -304, -298, -280, -286, -304, 7881, -304, -286, -280, -298, -304, -298, -280, -264, -280, -286, -280, -264);
    kernel_G[15] = (Mat_<short>(5, 5) << -283, -300, -306, -300, -283, -300, -319, -325, -319, -300, -306, -325, 8371, -325, -306, -300, -319, -325, -319, -300, -283, -300, -306, -300, -283);
    kernel_G[16] = (Mat_<short>(5, 5) << -377, -401, -409, -401, -377, -401, -425, -434, -425, -401, -409, -434, 10820, -434, -409, -401, -425, -434, -425, -401, -377, -401, -409, -401, -377);
    kernel_G[17] = (Mat_<short>(5, 5) << -566, -601, -613, -601, -566, -601, -638, -651, -638, -601, -613, -651, 15719, -651, -613, -601, -638, -651, -638, -601, -566, -601, -613, -601, -566);
    kernel_G[18] = (Mat_<short>(5, 5) << -755, -802, -818, -802, -755, -802, -851, -868, -851, -802, -818, -868, 20617, -868, -818, -802, -851, -868, -851, -802, -755, -802, -818, -802, -755);
    kernel_G[19] = (Mat_<short>(5, 5) << -944, -1002, -1022, -1002, -944, -1002, -1064, -1086, -1064, -1002, -1022, -1086, 25515, -1086, -1022, -1002, -1064, -1086, -1064, -1002, -944, -1002, -1022, -1002, -944);
    kernel_G[20] = (Mat_<short>(5, 5) << -1133, -1203, -1227, -1203, -1133, -1203, -1277, -1303, -1277, -1203, -1227, -1303, 30414, -1303, -1227, -1203, -1277, -1303, -1277, -1203, -1133, -1203, -1227, -1203, -1133);

    Mat kernel = kernel_G[sharp];
    // Q6.10 --> FP32
    kernel.convertTo(kernel, CV_32FC1, 1.0 / pow(2.0, 10));
    filter2D(src, dst, src.depth(), kernel);
    GaussianBlur(dst, dst, Size(3, 3), sigma);

    return dst;
}

Mat sharpening_no_black_edge(Mat img, int sharp, int maxgradient)
{
    Mat dst;

    float sigma = sharp * 0.05;

    if (sharp <= 5)
    {
        sigma = 0.3;
    }


    Mat kernel_G[21];

    kernel_G[0] = (Mat_<short>(5, 5) << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    kernel_G[1] = (Mat_<short>(5, 5) << -18, -20, -20, -20, -18, -20, -21, -21, -21, -20, -20, -21, 1513, -21, -20, -20, -21, -21, -21, -20, -18, -20, -20, -20, -18);
    kernel_G[2] = (Mat_<short>(5, 5) << -37, -40, -40, -40, -37, -40, -42, -43, -42, -40, -40, -43, 2003, -43, -40, -40, -42, -43, -42, -40, -37, -40, -40, -40, -37);
    kernel_G[3] = (Mat_<short>(5, 5) << -56, -60, -61, -60, -56, -60, -63, -65, -63, -60, -61, -65, 2493, -65, -61, -60, -63, -65, -63, -60, -56, -60, -61, -60, -56);
    kernel_G[4] = (Mat_<short>(5, 5) << -75, -80, -81, -80, -75, -80, -85, -86, -85, -80, -81, -86, 2983, -86, -81, -80, -85, -86, -85, -80, -75, -80, -81, -80, -75);
    kernel_G[5] = (Mat_<short>(5, 5) << -94, -100, -102, -100, -94, -100, -106, -108, -106, -100, -102, -108, 3473, -108, -102, -100, -106, -108, -106, -100, -94, -100, -102, -100, -94);
    kernel_G[6] = (Mat_<short>(5, 5) << -113, -120, -122, -120, -113, -120, -127, -130, -127, -120, -122, -130, 3963, -130, -122, -120, -127, -130, -127, -120, -113, -120, -122, -120, -113);
    kernel_G[7] = (Mat_<short>(5, 5) << -132, -140, -143, -140, -132, -140, -149, -152, -149, -140, -143, -152, 4452, -152, -143, -140, -149, -152, -149, -140, -132, -140, -143, -140, -132);
    kernel_G[8] = (Mat_<short>(5, 5) << -151, -160, -163, -160, -151, -160, -170, -173, -170, -160, -163, -173, 4942, -173, -163, -160, -170, -173, -170, -160, -151, -160, -163, -160, -151);
    kernel_G[9] = (Mat_<short>(5, 5) << -169, -180, -184, -180, -169, -180, -191, -195, -191, -180, -184, -195, 5432, -195, -184, -180, -191, -195, -191, -180, -169, -180, -184, -180, -169);
    kernel_G[10] = (Mat_<short>(5, 5) << -188, -200, -204, -200, -188, -200, -212, -217, -212, -200, -204, -217, 5922, -217, -204, -200, -212, -217, -212, -200, -188, -200, -204, -200, -188);
    kernel_G[11] = (Mat_<short>(5, 5) << -207, -220, -225, -220, -207, -220, -234, -238, -234, -220, -225, -238, 6412, -238, -225, -220, -234, -238, -234, -220, -207, -220, -225, -220, -207);
    kernel_G[12] = (Mat_<short>(5, 5) << -226, -240, -245, -240, -226, -240, -255, -260, -255, -240, -245, -260, 6902, -260, -245, -240, -255, -260, -255, -240, -226, -240, -245, -240, -226);
    kernel_G[13] = (Mat_<short>(5, 5) << -245, -260, -265, -260, -245, -260, -276, -282, -276, -260, -265, -282, 7391, -282, -265, -260, -276, -282, -276, -260, -245, -260, -265, -260, -245);
    kernel_G[14] = (Mat_<short>(5, 5) << -264, -280, -286, -280, -264, -280, -298, -304, -298, -280, -286, -304, 7881, -304, -286, -280, -298, -304, -298, -280, -264, -280, -286, -280, -264);
    kernel_G[15] = (Mat_<short>(5, 5) << -283, -300, -306, -300, -283, -300, -319, -325, -319, -300, -306, -325, 8371, -325, -306, -300, -319, -325, -319, -300, -283, -300, -306, -300, -283);
    kernel_G[16] = (Mat_<short>(5, 5) << -377, -401, -409, -401, -377, -401, -425, -434, -425, -401, -409, -434, 10820, -434, -409, -401, -425, -434, -425, -401, -377, -401, -409, -401, -377);
    kernel_G[17] = (Mat_<short>(5, 5) << -566, -601, -613, -601, -566, -601, -638, -651, -638, -601, -613, -651, 15719, -651, -613, -601, -638, -651, -638, -601, -566, -601, -613, -601, -566);
    kernel_G[18] = (Mat_<short>(5, 5) << -755, -802, -818, -802, -755, -802, -851, -868, -851, -802, -818, -868, 20617, -868, -818, -802, -851, -868, -851, -802, -755, -802, -818, -802, -755);
    kernel_G[19] = (Mat_<short>(5, 5) << -944, -1002, -1022, -1002, -944, -1002, -1064, -1086, -1064, -1002, -1022, -1086, 25515, -1086, -1022, -1002, -1064, -1086, -1064, -1002, -944, -1002, -1022, -1002, -944);
    kernel_G[20] = (Mat_<short>(5, 5) << -1133, -1203, -1227, -1203, -1133, -1203, -1277, -1303, -1277, -1203, -1227, -1303, 30414, -1303, -1227, -1203, -1277, -1303, -1277, -1203, -1133, -1203, -1227, -1203, -1133);

    Mat kernel = kernel_G[sharp];
    // Q6.10 --> FP32
    kernel.convertTo(kernel, CV_32FC1, 1.0 / pow(2.0, 10));
    filter2D(img, dst, img.depth(), kernel);
    GaussianBlur(dst, dst, Size(3, 3), sigma);

    //no_black_edge
    Mat outim;
    dst.copyTo(outim);
    Mat x_grad, y_grad, grad;
    
    Sobel(outim, x_grad, CV_16S, 1, 0, 1);
    Sobel(outim, y_grad, CV_16S, 0, 1, 1);
    convertScaleAbs(x_grad, x_grad);
    convertScaleAbs(y_grad, y_grad);
    addWeighted(x_grad, 1, y_grad, 1, 0, grad);

    int  iRows = outim.rows;
    int  iCols = outim.cols;
    double gra_weight;
    for(int  i = 0; i < iRows; i++)
    {
        for(int  j = 0; j < iCols; j++)
        {
            gra_weight = (grad.at<uchar>(i,j) - maxgradient)/(255.0 - maxgradient);
            if(grad.at<uchar>(i,j) > maxgradient){
                outim.at<uchar>(i,j) = img.at<uchar>(i,j)* gra_weight + outim.at<uchar>(i,j)* (1 - gra_weight);
            }

        }
    }

    return outim;
}


void ee_test()
{
    // int sharpness[21] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 30, 40, 50, 60};
    for (int sharp_index = 8; sharp_index < 9; ++sharp_index)
    {
        int sharp = sharp_index;//sharpness[sharp_index];
        string path = "F:/JZYY/pic/ETIS-LaribPolypDB/ETIS-LaribPolypDB/192.tif";
        Mat img = imread(path);

        if (img.empty())
        {
            printf("%s\n", "File not be found!");
            system("pause");
            return;
        }

        Mat yuv_img;
        cvtColor(img, yuv_img, COLOR_BGR2YUV);
        Mat color_corrected[3];
        cv::split(yuv_img, color_corrected);
        Mat Y = color_corrected[0];

        Mat out_no_black_edge;
        //Mat out_no_s;
        //Mat out_no_s2;
        //Mat out_edge;

        int maxgradient = 25;
        //out_no_s = sharpening(Y, sharp);
        //out_no_s2 = sharpening_stream(Y, sharp);
        //out_edge = sharpening_stream_save_kernel(Y, sharp);
        out_no_black_edge = sharpening_no_black_edge(Y, sharp, maxgradient);

        out_no_black_edge.convertTo(out_no_black_edge, CV_8UC1);
        Mat out_bgr;
        color_corrected[0] = out_no_black_edge;

        merge(color_corrected, 3, yuv_img);
        cvtColor(yuv_img, out_bgr, COLOR_YUV2BGR);

        imwrite("./result/USM/192usm8cpp"+ to_string(sharp)+".png", out_bgr);
        cv::waitKey(0);
    }
    
}

int main(){
    ee_test();
}